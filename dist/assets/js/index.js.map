{"version":3,"sources":["index.js"],"names":["setStyles","localStorage","getItem","JSON","parse","setItem","stringify","getStylesList","getSettingsBtn","document","getElementById","getMainMenuBtn","getStylesBtn","getMenuStyles","getMenuColor","getMenuFont","getWeatherBlock","getWeatherWrap","getCitiesList","getLocation","monthNames","dayName","date","Date","currentDate","getDate","getMonth","getFullYear","getDayName","getDay","UI","[object Object]","element","className","classList","toggle","target","contains","parentNode","getAttribute","neededClass","neededData","key","obj","initUI","addEventListener","e","this","settings","setActiveDayPeriod","saveStyles","Data","data","innerHTML","city","day","map","item","time","temp","wet","wind","wea","country","initData","getData","async","res","fetch","json","body","remove","outputCities","getMenuItems","getElementsByClassName","cityData","getCityData","Array","from","forEach","innerText","outputWeather","outputLocaion","dayPeriod","add","getHours"],"mappings":"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","sourcesContent":["// check, set and get values from local storage\nconst setStyles = localStorage.getItem('weatherStyles') ? \n    JSON.parse(localStorage.getItem('weatherStyles')) : {};\nlocalStorage.setItem('weatherStyles', JSON.stringify(setStyles));\nconst getStylesList = JSON.parse(localStorage.getItem('weatherStyles'));\n\n// get settings btn\nconst getSettingsBtn = document.getElementById('settings');\n\n// main menu\nconst getMainMenuBtn = document.getElementById('main-menu');\n\n// button for style options (fonts, colors)\nconst getStylesBtn = document.getElementById('styles-btn');\n\n// menu with styles (fonts, colors)\nconst getMenuStyles = document.getElementById('styles-menu');\n\n// menu with colors\nconst getMenuColor = document.getElementById('colors');\n\n// menu with fonts\nconst getMenuFont = document.getElementById('fonts');\n\n// block with weather\nconst getWeatherBlock = document.getElementById('weather-block');\n\n// whole wrap\nconst getWeatherWrap = document.getElementById('weather-wrap');\n\n// list for cities\nconst getCitiesList = document.getElementById('cities-list');\n\n// get location (top panel)\nconst getLocation = document.getElementById('currentLocation');\n\n// Month names\nconst monthNames = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\n\n// Day names\nconst dayName = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday'\n]\n\n// date obj\nconst date = new Date();\n\n// current date\nconst currentDate = date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + date.getFullYear();\n\n// key for obj from json.file\nconst getDayName = dayName[date.getDay()];\n\n\n/*\n** CLASS UI\n*/\nclass UI {\n    constructor() { }\n\n    // setting buttons (settings, styles)\n    settings(element, className) {\n        element.classList.toggle(className);\n    }\n\n    // set active day period\n    setActiveDayPeriod(target) {\n        if (target.classList.contains('info-list__item')) {\n            getWeatherBlock.classList = 'weather-block ' +\n                'show-' + target.parentNode.getAttribute('data-period');\n        } else { }\n    }\n\n    // change font, theme and set local storage for styles\n    setStyles(target, neededClass, neededData, key) {\n        if (target.classList.contains(neededClass)) {\n            getStylesList[key] = target.getAttribute(neededData);\n            localStorage.setItem('weatherStyles', JSON.stringify(getStylesList));\n        } else { }\n    }\n\n    // save selected font and theme to local storage\n    saveStyles(obj, element) {\n        element.classList = 'weather-wrap';\n        for (let key in obj) {\n            element.classList += ' ' + obj[key];\n        }\n    }\n}\n\n\n/*\n** UI CLASS INITIALIZATION\n*/\nconst initUI = new UI();\n\n\n/*\n** MENU BUTTON (settings)\n*/\ngetSettingsBtn.addEventListener('click', function (e) {\n    this.classList.toggle('active');\n    initUI.settings(getMainMenuBtn, 'active');\n});\n\n\n/*\n** FONT AND THEME BUTTON\n*/\ngetStylesBtn.addEventListener('click', () => {\n    initUI.settings(getMenuStyles, 'active');\n});\n\n\n/*\n** CLICK EVENT FOR SHOWING CLICKED PERIOD OF DAY\n*/\ngetWeatherBlock.addEventListener('click', (e) => {\n    initUI.setActiveDayPeriod(e.target);\n});\n\n\n/*\n** CLICK EVENT FOR COLORS\n*/\ngetMenuColor.addEventListener('click', (e) => {\n    initUI.setStyles(e.target, 'menu__color--item', 'data-theme', 'theme');\n    initUI.saveStyles(getStylesList, getWeatherWrap);\n});\n\n\n/*\n** CLICK EVENT FOR FONTS\n*/\ngetMenuFont.addEventListener('click', (e) => {\n    initUI.setStyles(e.target, 'menu__font--item', 'data-font', 'font');\n    initUI.saveStyles(getStylesList, getWeatherWrap);\n});\n\n\n/*\n** CLASS DATA\n*/\nclass Data {\n\n    constructor() { }\n\n    // output cities\n    outputCities(data, element) {\n        for (var key in data) {\n            element.innerHTML += `<li class=\"menu__item\">${key}</li>`;\n        }\n    }\n\n    // output weather data\n    outputWeather(data, element,city, day) {\n        element.innerHTML = '';\n        data[city][day].map((item) => {\n            element.innerHTML +=\n                `<ul class=\"info-list ${item.time}\" data-period=${item.time}>\n                    <li class=\"info-list__item \">\n                        ${item.time}\n                    </li>\n    \n                    <li class=\"info-list__item temperature\">\n                        ${item.temp}\n                    </li>\n    \n                    <li class=\"info-list__item\">\n                        <span class=\"far fa-calendar-alt\"></span>\n                        ${currentDate}\n                    </li>\n    \n                    <li class=\"info-list__item\">\n                        ${item.wet}\n                        <span class=\"fas fa-tint\"></span>\n                    </li>\n    \n                    <li class=\"info-list__item\">\n                        <span class=\"fas fa-wind\"></span>\n                        ${item.wind}\n                    </li>\n    \n                    <li class=\"info-list__item\">\n                        ${item.wea}\n                        <span class=\"fas fa-cloud-sun\"></span>\n                    </li>\n                    <li class=\"info-list__item\" style='width: 100%'>\n                        <div class=\"${item.time + '-weather ' + item.wea}\"></div>\n                    </li>\n                </ul>`;\n        });\n    }\n\n    // output slected city and country (top panel)\n    outputLocaion(element, city, country) {\n        element.innerHTML = city + \", \" + country;\n    }\n}\n\n\n/*\n** DATA CLASS INITIALLIZATION\n*/\nconst initData = new Data();\n\n\n/*\n** GET DATA FROM JSON FILE\n*/\nconst getData = async () => {\n    const res = await fetch('https://my-json-server.typicode.com/bogdan845/weather-data/db');\n    const data = await (res.json());\n\n    // set and output saved styles from local storage with loaded data\n    const displayWeather = await( () => {\n        (initUI.saveStyles(getStylesList, getWeatherWrap));\n        (document.body.classList.remove(\"awaiting\"));\n    });\n    displayWeather();\n\n    // output citites from data\n    initData.outputCities(data, getCitiesList);\n\n    // get created items (cities);\n    let getMenuItems = document.getElementsByClassName(\"menu__item\");\n\n    // get city data (city, country)\n    let cityData = {};\n\n    // check and set local storage\n    let cityInfo = localStorage.getItem(\"weatherCity\") ? \n        localStorage.getItem(\"weatherCity\", JSON.stringify(cityData)) : \n        localStorage.setItem(\"weatherCity\", JSON.stringify({ \"city\": \"Kiev\", \"country\": \"Ukraine\" }));\n\n    // get values from local storage (city)\n    let getCityData = JSON.parse(localStorage.getItem(\"weatherCity\"));\n\n    // click event for each city\n    Array.from(getMenuItems).forEach((item) => {\n        item.addEventListener('click', function () {\n\n            // close menu\n            getSettingsBtn.classList.remove(\"active\");\n            getMainMenuBtn.classList.remove(\"active\");\n\n            // get selected values\n            cityData = { city: this.innerText, country: data[this.innerText].country }\n\n            // set local storage when click on city\n            localStorage.setItem(\"weatherCity\", JSON.stringify(cityData));\n\n            // get values from local storage\n            getCityData = JSON.parse(localStorage.getItem(\"weatherCity\"));\n\n            // output weather dynamically for clicked city\n            initData.outputWeather(data, getWeatherBlock, getCityData.city, getDayName);\n            initData.outputLocaion(getLocation,  getCityData.city,  getCityData.country);\n        });\n    });\n\n    // output saved weather for current city\n    initData.outputWeather(data, getWeatherBlock, getCityData.city, getDayName);\n    initData.outputLocaion(getLocation,  getCityData.city,  getCityData.country);\n}\ngetData();\n\n\n/*\n** DISPLAY CURRENT DAY PERIOD\n*/\nconst dayPeriod = (time) => {\n    if (time >= 4 && time < 12) {\n        getWeatherBlock.classList.add('show-morning');\n    } else if (time >= 12 && time < 18) {\n        getWeatherBlock.classList.add('show-day');\n    } else if (time >= 18 && time <= 23) {\n        getWeatherBlock.classList.add('show-evening');\n    } else {\n        getWeatherBlock.classList.add('show-night');\n    }\n}\ndayPeriod(date.getHours());"],"file":"index.js"}